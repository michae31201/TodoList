{"version":3,"sources":["utils/getFormateDate.js","utils/getFormateTime.js","TodoContext.js","component/TaskForm.js","component/Menu.js","component/Task.js","utils/getSortedTasks.js","component/TaskList.js","component/App.js","TodoStore.js","serviceWorker.js","index.js"],"names":["getFormateDate","date","dateArray","toLocaleDateString","split","month","day","join","getFormateTime","toTimeString","slice","TodoContext","React","createContext","TaskForm","state","id","Date","now","task","time","note","complete","handleChange","e","setState","target","value","saveTask","props","editData","context","editTask","addTask","closeEdit","alert","this","className","icon","faEdit","faTasks","type","required","onChange","faCalendarAlt","faCommentDots","onClick","faDownload","faTimes","Component","contextType","Menu","mode","changeMode","tasks","length","filter","Task","isEdit","openEdit","checked","changeTaskState","getSortedTasks","sort","sortType","a","b","aTime","getTime","bTime","TaskList","search","handleSearchValue","handleTaskSort","handleTaskSortType","tasklist","placeholder","faSortAmountDownAlt","faSortAmountUpAlt","includes","map","key","App","TodoStore","newTask","saveToLocalStorage","index","findIndex","splice","JSON","stringify","window","localStorage","setItem","storageTasks","getItem","parse","Provider","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.614d58c7.chunk.js","sourcesContent":["const getFormateDate = (date) => {\r\n    let dateArray = date.toLocaleDateString().split(\"/\");\r\n    let month = dateArray[1];\r\n    let day = dateArray[2];\r\n    if(month < 10){\r\n        dateArray[1] = '0'+ month;\r\n    }\r\n    if(day < 10){\r\n        dateArray[2] = '0'+day;\r\n    }\r\n    \r\n    return dateArray.join(\"-\");\r\n}\r\n\r\nexport default getFormateDate;","const getFormateTime = (date) => {\r\n    let time = date.toTimeString().split(\" \")[0];\r\n    return time.slice(0,-3);\r\n}\r\n\r\nexport default getFormateTime;","import React from 'react';\r\n\r\nconst TodoContext = React.createContext();\r\n\r\nexport default TodoContext;","import React from 'react';\r\nimport getFormateDate from '../utils/getFormateDate';\r\nimport getFormateTime from '../utils/getFormateTime';\r\nimport TodoContext from '../TodoContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEdit, faDownload, faTimes,faTasks,} from '@fortawesome/free-solid-svg-icons'\r\nimport { faCommentDots, faCalendarAlt } from '@fortawesome/free-regular-svg-icons'\r\nimport '../css/TaskForm.css';\r\n\r\nclass TaskForm extends React.Component{\r\n    state = {\r\n        id:Date.now(),\r\n        task:\"\",\r\n        day:\"\",\r\n        time:\"\",\r\n        note:\"\",\r\n        complete:false,\r\n    }\r\n    componentDidMount(){\r\n        if(this.props.editData){\r\n            const {id, task, day, time, note, complete} = this.props.editData;\r\n            this.setState({id, task, day, time, note, complete});\r\n        }else{\r\n            let date = new Date();\r\n            let day = getFormateDate(date);\r\n            let time = getFormateTime(date);\r\n            this.setState({day,time})\r\n        }\r\n    }\r\n    handleChange = (e) =>{\r\n        this.setState({[e.target.id]:e.target.value})\r\n    }\r\n    saveTask = () => {\r\n        const task = {...this.state}\r\n        if(task.task !== \"\"){\r\n            if(this.props.editData){\r\n                this.context.editTask(task)\r\n            }else{\r\n                this.context.addTask(task);\r\n            }\r\n            this.props.closeEdit();\r\n        }else{\r\n            alert(\"事項不得為空\");\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {task, day, time, note} = this.state;\r\n        return(\r\n            <div className=\"TaskForm\">\r\n                {\r\n                    this.props.editData?\r\n                        <h2><FontAwesomeIcon icon={faEdit}/>編輯事項</h2>:<h2><FontAwesomeIcon icon={faTasks} />新增事項</h2>\r\n                }\r\n                <hr/>\r\n                <div className=\"form-input\">\r\n                    <div className=\"input-name\">\r\n                        <FontAwesomeIcon icon={faTasks} />\r\n                        事項\r\n                    </div>\r\n                    <input type=\"text\" className=\"input-style\" id=\"task\" value = {task} required onChange={this.handleChange}/>\r\n                </div>\r\n                <div className=\"form-input\">\r\n                    <div  className=\"input-name\">\r\n                        <FontAwesomeIcon icon={faCalendarAlt} />\r\n                        <span>到期日</span>\r\n                    </div>\r\n                    <input type=\"date\" className=\"input-style input-time\" id=\"day\" value = {day} onChange={this.handleChange}/>\r\n                    <input type=\"time\" className=\"input-style input-time\" id=\"time\" value={time} onChange={this.handleChange} />\r\n                </div>\r\n                <div className=\"form-input\">\r\n                    <div  className=\"input-name\">\r\n                        <FontAwesomeIcon icon={faCommentDots} />\r\n                         備註\r\n                    </div>\r\n                    <textarea className=\"input-style\" id=\"note\" value={note} onChange={this.handleChange}/>\r\n                </div>\r\n                <button className=\"input-btn save-btn\" onClick={this.saveTask}>\r\n                    <FontAwesomeIcon icon={faDownload}/>\r\n                    儲存\r\n                </button>\r\n                <button className=\"input-btn cancel-btn\" onClick={this.props.closeEdit}>\r\n                    <FontAwesomeIcon icon={faTimes}/>\r\n                    取消\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nTaskForm.contextType = TodoContext;\r\nexport default TaskForm;","import React from 'react';\r\nimport TodoContext from '../TodoContext';\r\nimport '../css/Menu.css';\r\nclass Menu extends React.Component{\r\n    render(){\r\n        const {mode,changeMode} = this.context;\r\n        return(\r\n            <div className=\"Menu\">\r\n                <div className=\"btn-group\">\r\n                    <button className={mode === \"all\"?\"selectBtn\":\"\"} id=\"all\" onClick={changeMode}>\r\n                        全部\r\n                        <span className=\"task-count\">{this.context.tasks.length}</span>\r\n                    </button>\r\n                    <button className={mode === \"progress\"?\"selectBtn\":\"\"} id=\"progress\" onClick={changeMode}>\r\n                        進行中\r\n                        <span className=\"task-count\">\r\n                            {\r\n                                this.context.tasks.filter((task) => (!task.complete)).length\r\n                            }\r\n                        </span>\r\n                    </button>\r\n                    <button className={mode === \"complete\"?\"selectBtn\":\"\"} id=\"complete\" onClick={changeMode}>\r\n                        完成\r\n                        <span className=\"task-count\">\r\n                            {\r\n                                this.context.tasks.filter((task) => (task.complete)).length\r\n                            }\r\n                        </span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nMenu.contextType = TodoContext;\r\nexport default Menu;","import React from 'react';\r\nimport TaskForm from './TaskForm';\r\nimport TodoContext from '../TodoContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEdit,faTasks,} from '@fortawesome/free-solid-svg-icons'\r\nimport { faCommentDots, faCalendarAlt } from '@fortawesome/free-regular-svg-icons'\r\nimport '../css/Task.css';\r\n\r\nclass Task extends React.Component{\r\n    state = {\r\n        isEdit:false\r\n    }\r\n    openEdit  = () => {\r\n        this.setState({isEdit:true});\r\n      }\r\n    closeEdit = () => {\r\n        this.setState({isEdit:false});\r\n    }\r\n    render(){\r\n        const {id, task, day, time, note, complete} = this.props;\r\n        return(\r\n           this.state.isEdit ? \r\n            <TaskForm editData={{id, task, day, time, note, complete}} closeEdit={this.closeEdit}/>\r\n            :\r\n            <div className={`task ${complete?\"task-fin\":\"\"}`}>\r\n                <input type=\"checkbox\" className=\"task-check\" checked={complete} onChange={(e)=>{this.context.changeTaskState(e,id)}}/>\r\n                <button className=\"task-edit\" onClick={this.openEdit}>\r\n                    <FontAwesomeIcon icon={faEdit} />\r\n                </button>\r\n                <div className=\"task-text\">\r\n                    <div  className=\"task-name\">\r\n                        <FontAwesomeIcon icon={faTasks} />\r\n                        <p>{task}</p>\r\n                    </div>\r\n                    <div className=\"task-note\">\r\n                        <FontAwesomeIcon icon={faCommentDots} />\r\n                        <p>{note}</p>\r\n                    </div>\r\n                    <div className=\"task-time\">\r\n                        <FontAwesomeIcon icon={faCalendarAlt} />\r\n                        <p> 到期日:{day} {time}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\nTask.contextType = TodoContext;\r\nexport default Task;","const getSortedTasks = (tasks, sort, sortType) => {\r\n    const sortedTasks = tasks.sort((a,b)=>{\r\n        const aTime = sortType === \"deadline\"?new Date(`${a.day} ${a.time}`).getTime():a.id;\r\n        const bTime = sortType === \"deadline\"?new Date(`${b.day} ${b.time}`).getTime():b.id;\r\n\r\n        return sort === \"min\" ? (aTime - bTime) : (bTime - aTime);\r\n    })\r\n\r\n    return sortedTasks;\r\n}\r\n\r\nexport default getSortedTasks;","import React from 'react';\r\nimport TodoContext from '../TodoContext';\r\nimport Task from './Task';\r\nimport getSortedTasks from '../utils/getSortedTasks';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {faSortAmountUpAlt, faSortAmountDownAlt} from '@fortawesome/free-solid-svg-icons';\r\nimport '../css/TaskList.css';\r\n\r\nclass TaskList extends React.Component{\r\n    state = {\r\n        search:\"\",\r\n        sort:\"min\",\r\n        sortType:\"deadline\"\r\n    }\r\n\r\n    handleSearchValue = (e) => {\r\n        const search = e.target.value;\r\n        this.setState({search});\r\n    }\r\n    handleTaskSort = (e) => {    \r\n        const sort = this.state.sort === \"min\" ? \"max\":\"min\";\r\n        this.setState({sort});\r\n    }\r\n    handleTaskSortType = (e) => {\r\n        const sortType = e.target.value;\r\n        this.setState({sortType});\r\n    }\r\n    render(){\r\n        const {search, sort, sortType} = this.state;\r\n        let tasklist;\r\n\r\n        switch(this.context.mode){\r\n            case \"progress\":\r\n                tasklist = this.context.tasks.filter((task) => {\r\n                    return !task.complete;\r\n                });\r\n                break;\r\n            case \"complete\":\r\n                tasklist = this.context.tasks.filter((task) => {\r\n                    return task.complete;\r\n                });\r\n                break;\r\n            default:\r\n                tasklist = this.context.tasks;\r\n                break;\r\n        }\r\n        tasklist = getSortedTasks(tasklist, sort, sortType);\r\n        \r\n        return(\r\n            <div>\r\n                <div className=\"task-search\">\r\n                    <input type=\"text\" placeholder=\"搜尋...\"  value={search} onChange={this.handleSearchValue}/>\r\n                    <button onClick={this.handleTaskSort}>\r\n                        <FontAwesomeIcon icon={sort===\"min\" ? faSortAmountDownAlt:faSortAmountUpAlt}/>\r\n                    </button>\r\n                    <select value={sortType} onChange={this.handleTaskSortType}>\r\n                        <option value=\"deadline\">到期日</option>\r\n                        <option value=\"addday\">新增日</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"tasklist\">\r\n                    {\r\n                        tasklist\r\n                            .filter((task) => {\r\n                                return task.task.includes(search) || task.note.includes(search);\r\n                            })\r\n                            .map((task) => {\r\n                                return <Task key={task.id} {...task}/>\r\n                            })\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nTaskList.contextType = TodoContext;\r\nexport default TaskList;","import React from 'react';\nimport AddTask from './TaskForm';\nimport Menu from './Menu';\nimport TodoContext from '../TodoContext';\nimport TaskList from './TaskList';\nimport '../css/App.css';\n\nclass App extends React.Component {\n  state = {\n    isEdit:false\n  }\n  openEdit  = () => {\n    this.setState({isEdit:true});\n  }\n  closeEdit = () => {\n    this.setState({isEdit:false});\n  }\n  render(){\n    const {isEdit} = this.state;\n    return(\n      <div className=\"App\">\n        <Menu/>\n        {\n          isEdit ? \n          <AddTask closeEdit={this.closeEdit}/>\n          :\n          <div>\n            <button className=\"add-btn\" onClick={this.openEdit}> + </button>\n            <TaskList/>\n          </div>\n        }\n      </div>\n    )\n  }\n}\nApp.contextType = TodoContext;\nexport default App;","import React from 'react';\r\nimport App from './component/App';\r\nimport TodoContext from './TodoContext';\r\nimport getSortedTasks from './utils/getSortedTasks';\r\n\r\nclass TodoStore extends React.Component{\r\n    state = {\r\n        mode:\"all\",\r\n        tasks:[],\r\n    }\r\n    componentDidMount(){\r\n        let storageTasks = localStorage.getItem(\"_TodoList\");\r\n        if(storageTasks){\r\n            const tasks = JSON.parse(storageTasks);\r\n            this.setState({tasks});\r\n        }\r\n    }\r\n    changeMode = (e) => {\r\n        const mode = e.target.id;\r\n        this.setState({mode});\r\n    }\r\n    addTask = (newTask) => {\r\n        const tasks =  getSortedTasks([...this.state.tasks,newTask], \"min\", \"deadline\")\r\n        this.setState({tasks},this.saveToLocalStorage)\r\n        alert(\"新增事項成功!\");\r\n    }\r\n    editTask = (editTask) =>{\r\n        const tasks = [...this.state.tasks];\r\n        const index = tasks.findIndex(task => task.id === editTask.id);\r\n        tasks.splice(index,1,editTask);\r\n        this.setState({\r\n            tasks:getSortedTasks([...tasks], \"min\", \"deadline\")\r\n        },this.saveToLocalStorage);\r\n        alert(\"編輯事項成功!\");\r\n    }\r\n    changeTaskState = (e,id) => {\r\n        const tasks = [...this.state.tasks];\r\n        const index = tasks.findIndex((task) => task.id === id);\r\n        tasks[index].complete = e.target.checked;\r\n        this.setState({tasks:[...tasks]},this.saveToLocalStorage)\r\n    }\r\n    saveToLocalStorage = () => {\r\n        const tasks = JSON.stringify(this.state.tasks);\r\n        window.localStorage.setItem(\"_TodoList\",tasks);\r\n    }\r\n    render(){\r\n        const {mode, tasks} = this.state;\r\n        const changeMode = this.changeMode;\r\n        const addTask = this.addTask;\r\n        const editTask = this.editTask;\r\n        const changeTaskState = this.changeTaskState;\r\n        return(\r\n            <TodoContext.Provider value={{mode, tasks, changeMode, addTask, editTask, changeTaskState}}>\r\n                <App/>\r\n            </TodoContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoStore;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport TodoStore from './TodoStore';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TodoStore />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}